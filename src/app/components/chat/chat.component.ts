import { Component, Output, EventEmitter, ViewChild, ElementRef, Input, AfterViewChecked, AfterViewInit } from '@angular/core';

@Component({
  selector: 'chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css'],

})
export class ChatComponent implements AfterViewChecked, AfterViewInit {
  // *** –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ***
  messageDialog: string = '';  // —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –æ–∫–Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  hiddenDialog = true;  // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  acceptDialog: string = ''; // –æ—Ç–≤–µ—Ç –≤ –æ–∫–Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è 1-–¥–∞, 2 -–Ω–µ—Ç, '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –Ω–æ ...'-–µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥. –≤—Ä–µ–º–µ–Ω–∏
  functionResponse!: Function; // –∑–∞–º—ã–∫–∞–Ω–∏–µ
  timingString: string = ''; //—Å—Ç—Ä–æ–∫–∞ —Ç–∞–π–º–∏–Ω–≥–∞ (20/20) –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –≤ –æ–∫–Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  // *** 
  usersObj: { [key: string]: string } = {}; //–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏
  usersArray: any[] = []; // –¥—É–±–ª–∏—Ä—É–µ—Ç usersObj –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ HTML
  socket: any;
  myName: string = ''; // –∏–º—è –∏–≥—Ä–æ–∫–∞ 
  enemyName = ''; //–∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ HTML
  enemyId = ''; //id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
  messageTo = ''; // –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ HTML –∫–æ–º—É –ø–∏—à–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
  block = false;//–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  answer = false;// –±—ã–ª –ª–∏ –¥–∞–Ω –æ—Ç–≤–µ—Ç –≤ –æ–∫–Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–µ–Ω–∏
  timeInvite = "";
  intv: any;
  aud: any;
  arrDialog: Array<Array<string>> = [];
  lblInput!: any;

  constructor() {
    this.socket = io();
    this.socket.on('printing', (idFrom: string) => {
      if (idFrom === this.playerSelectElnt.value) {
        this.lblInput.innerHTML = ':' + this.usersArray[this.playerSelectElnt.selectedIndex][1] + '–ø–µ—á–∞—Ç–∞–µ—Ç';
        setTimeout(() => {
          this.lblInput.innerHTML = ':' + this.usersArray[this.playerSelectElnt.selectedIndex][1];
        }, 500);
      }
    })

    this.socket.on("addExistingUsers", (users: any) => {
      Object.assign(this.usersObj, users);
      this.updateUsersArray();
    });

    this.socket.on("addNewUser", (user: { [key: string]: string }) => {
      Object.assign(this.usersObj, user);
      this.updateUsersArray();
    });

    this.socket.on('inviteToPlay', (senderId: string) => {

      function soundInvite() {
        var audio = new Audio();
        audio.src = './assets/war.mp3';
        audio.autoplay = true;
        return audio;
      }

      this.aud = soundInvite();

      this.block = true;
      this.answer = false;
      setTimeout(() => {
        if (this.answer === false) {
          this.block = false;
          this.answer = true;
          this.acceptDialog = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –Ω–æ ' + this.myName + ' –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.';
          this.functionResponse();
        }
      }, 22000);

      this.messageDialog = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + this.usersObj[senderId] + ' –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –∏–≥—Ä–∞—Ç—å. –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å?'
      this.hiddenDialog = false;

      let i = 20;

      let interval = setInterval(() => {
        if (i > 0) {
          this.timingString = `${i}/20`;
        } else {
          this.timingString = `${i}/20. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.`;
          clearInterval(interval);
        }
        i--;
      }, 1000);
      this.functionResponse = function (this: ChatComponent) {
        this.socket.timeout(30000).emit('invitationResponse', senderId, this.acceptDialog, (err: Error, response: { status: string }) => {
          if (err) {
            this.block = false;
            alert('–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!.')
          } else {
            if (response.status === 'ok' && this.acceptDialog === '1') {
              this.enemyId = senderId;
              this.enemyName = this.usersObj[senderId];
              this.playChange.emit(true);
              this.shotChange.emit(false);
              this.onMoveChange.emit('–°—Ç—Ä–µ–ª—è–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫');
            } else if (response.status !== 'ok' && this.acceptDialog === '1') {
              this.block = false;
              alert(response.status);
            }
          }
        });
      }
    });

    this.socket.on('invitationResponse', (id: string, acceptDialog: string) => {
      if (acceptDialog === '1') {
        clearInterval(this.intv);
        this.timeInvite = '';
        this.enemyId = id;
        this.enemyName = this.usersObj[id];
        this.onMoveChange.emit('–í–∞—à –≤—ã—Å—Ç—Ä–µ–ª');
        this.shotChange.emit(true);
        alert(this.enemyName + ' –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å');
      } else if (acceptDialog === '2') {
        clearInterval(this.intv);
        this.timeInvite = '';
        this.block = false;
        this.playChange.emit(false);
        alert(this.usersObj[id] + ' –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å');
      } else {
        clearInterval(this.intv);
        this.timeInvite = '';
        this.block = false;
        this.playChange.emit(false);
        alert(acceptDialog);
      }
    });

    this.socket.on('statusTwoPlayersBusy', (id1: string, id2: string) => {
      if (Object.hasOwn(this.usersObj, id1)) { this.usersObj[id1] = this.usersObj[id1].replace('üü¢', 'üîµ'); }
      if (Object.hasOwn(this.usersObj, id2)) { this.usersObj[id2] = this.usersObj[id2].replace('üü¢', 'üîµ'); }
      this.updateUsersArray();
      if (this.socket.id === id1 || this.socket.id === id2) {
        this.onMyName.emit(this.myName + 'üîµ');
        this.enemyName = this.enemyName.replace('üü¢', 'üîµ');
      }
    })

    this.socket.on('mePlayMarkFalse', (id: string) => {
      this.usersObj[id] = this.usersObj[id].replace('üîµ', 'üü¢');
      this.updateUsersArray();
    });

    this.socket.on('quitUser', (id: string) => {
      delete this.usersObj[id];
      this.updateUsersArray();
      if (this.block && this.enemyId === id) {
        this.enemyId = '';
        this.enemyName = '';
        this.block = false;
        this.playChange.emit(false);
        this.onMyName.emit(this.myName + 'üü¢');
        this.socket.emit('mePlayMarkFalse');
        this.onMoveChange.emit('–†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–∞–±–ª–∏');
        alert('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.');
        if (this.play) {
          this.onUpdate.emit();
        }
       
    
      }

    });

    this.socket.on('messageToUser', (idFrom: string, between: string, usrMessage: string, idMessage: string) => {
      this.socket.emit('gotAnswer', idFrom, between, usrMessage, idMessage, (response: { status: string }) => {
        if (response.status === 'ok') {
          this.arrDialog.push([idFrom, between, usrMessage, '1', idMessage]);
          var audio = new Audio();
          audio.src = './assets/message.mp3';
          audio.autoplay = true;
        } else {
          alert(response.status);
        }
      });
    });

    this.socket.on('gotAnswer', (idMessage: string) => {
      for (const dialog of this.arrDialog) {
        if (dialog[4] === idMessage) {
          dialog[3] = '2';
        }
      }

    });


  }
  ngAfterViewChecked(): void {
    let uList: any;
    uList = document.getElementById('msgUl');
    uList.scrollTop = uList.scrollHeight;
  }

  ngAfterViewInit(): void {
    this.lblInput = document.getElementById('lblPrint');
  }

  @Input() chatDesc: any;


  @ViewChild("inpMessage", { static: false })
  inpMsg!: ElementRef;

  @ViewChild("inpName", { static: false })
  inpName!: ElementRef;

  @ViewChild("selectPlayer", { static: false })
  slctPlayer!: ElementRef;
  playerSelectElnt!: HTMLSelectElement;

  @Input() play: boolean = false;
  @Output() playChange = new EventEmitter<boolean>();

  @Input() shot!: boolean;
  @Output() shotChange = new EventEmitter<boolean>();

  @Output() onMyName = new EventEmitter<string>();

  @Output() onUpdate=new EventEmitter;

  @Input() onMove: string = '';
  @Output() onMoveChange = new EventEmitter<string>();

  dialogOk() {
    if (this.block === true) {
      this.acceptDialog = '1';
      this.hiddenDialog = true;
      this.answer = true;
      this.aud.pause();
      this.functionResponse();
    }
  }

  dialogNo() {
    if (this.block === true) {
      this.answer = true;
      this.block = false;
      this.acceptDialog = '2';
      this.hiddenDialog = true;
      this.aud.pause();
      this.functionResponse();
    }
  }

  dialogClose() {
    if (this.block === false) {
      this.hiddenDialog = true;
      this.aud.pause();
    }
  }

  updateUsersArray() {
    this.usersArray.length = 0;
    for (const key in this.usersObj) {
      this.usersArray.push([key, this.usersObj[key]]);
    }
  }

  createUser() {
    if (this.inpName.nativeElement.disabled === false && this.inpName.nativeElement.value !== '') {
      this.socket.timeout(5000).emit('createNewUser', this.myName, (err: Error, response: { status: string }, users: Object) => {
        if (err) {
          alert(err.message)
        }
        if (response.status === "ok") {
          Object.assign(this.usersObj, users);
          this.updateUsersArray();
          this.inpName.nativeElement.disabled = true;
          this.onMyName.emit(this.myName + 'üü¢');
        } else {
          alert(response.status);
        }
      });
    }
  }

  inpNameEnter(event: KeyboardEvent) {
    if (event.code === 'Enter') {
      this.createUser();
    }
  }

  invatePlayer() {
    if (this.block === false) {
      this.block = true;
      this.playChange.emit(true);
      this.playerSelectElnt = this.slctPlayer.nativeElement;
      if (this.usersObj[this.playerSelectElnt.value].lastIndexOf('üîµ') > 0) {
        alert('–î–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç!');
        return;
      }
      if (this.playerSelectElnt.selectedIndex >= 0) {
        this.messageTo = '';
        this.timingString = '';
        let i = 0;
        this.intv = setInterval(() => {
          if (i < 40) {
            if (i < 10) {
              this.timeInvite = `–û–∂–∏–¥–∞–Ω–∏–µ - 0${i} —Å–µ–∫.`;
            } else {
              this.timeInvite = `–û–∂–∏–¥–∞–Ω–∏–µ - ${i} —Å–µ–∫.`;
            }
          } else {
            clearInterval(this.intv);
            this.timeInvite = '';
          }
          i++;
        }, 1000);

        this.socket.timeout(30000).emit('inviteToPlay', this.playerSelectElnt.value, (err: Error, response: { status: string }) => {
          if (err) {
            this.block = false;
            this.playChange.emit(false);
            clearInterval(this.intv);
            this.timeInvite = '';
            alert('–ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. ' + err.message);
          } else if (response.status !== 'ok') {
            clearInterval(this.intv);
            this.timeInvite = '';
            this.block = false;
            this.playChange.emit(false);
            alert(response.status);
          }
        });
      }
    } else {
      alert('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.');
    }
  }

  sendMessage(event: KeyboardEvent) {
    this.playerSelectElnt = this.slctPlayer.nativeElement;
    if (event.code === 'Enter') {
      this.sendMsg();
    } else {
      this.socket.emit('printing', this.playerSelectElnt.value);
    }
  }

  sendMsg() {
    if (this.playerSelectElnt.selectedIndex >= 0) {
      let name2: string = this.usersArray[this.playerSelectElnt.selectedIndex][1];
      name2 = name2.slice(0, name2.length - 2);
      let between: string = this.myName + '-' + name2;
      let usrMessage: string = this.inpMsg.nativeElement.value;
      this.inpMsg.nativeElement.disabled = true;
      let idMessage = String(Math.random());
      this.socket.timeout(30000).emit('messageToServer', this.playerSelectElnt.value, between, usrMessage, idMessage, (err: Error, response: { status: string }) => {
        if (err) {
          this.inpMsg.nativeElement.disabled = false;
          alert('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. ' + err.message);
        } else {
          if (response.status == "ok") {
            this.inpMsg.nativeElement.disabled = false;
            this.inpMsg.nativeElement.value = '';
            this.inpMsg.nativeElement.focus();
            this.arrDialog.push([this.socket.id, between, usrMessage, '1', idMessage]);
          } else {
            this.inpMsg.nativeElement.disabled = false;
            alert('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. ' + response.status);
          }
        }
      });
    } else {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞.')
    }
  }

  changePlayer() {
    this.playerSelectElnt = this.slctPlayer.nativeElement;
    const n = this.playerSelectElnt.selectedIndex;
    if (n >= 0) {
      this.messageTo = ' ' + this.playerSelectElnt.item(n)?.innerHTML;
    }

  }


}